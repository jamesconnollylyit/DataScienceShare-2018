colnames <- c("Date", "Country", "Gender", "Age", "Q1", "Q2", "Q3", "Q4", "Q5")
# Enter data into vectors before constructing the data frame
date_col <- c("2018-15-10", "2018-01-11", "2018-21-10", "2018-28-10", "2018-01-05")
country_col <- c("US", "US", "IRL", "IRL", "IRL")
gender_col <- c("M", "F", "F", "M", "F")
age_col <- c(32, 45, 25, 39, 99) # 99 is one of the values in the age attribute - will require recoding
q1_col <- c(5, 3, 3, 3, 2)
q2_col <- c(4, 5, 5, 3, 2)
q3_col <- c(5, 2, 5, 4, 1)
q4_col <- c(5, 5, 5, NA, 2) # NA is inserted in place of the missing data for this attribute
q5_col <- c(5, 5, 2, NA, 1)
# Construct a data frame using the data from all vectors above
my_data <- data.frame(date_col, country_col, gender_col, age_col, q1_col, q2_col, q3_col, q4_col, q5_col)
# Add column names to data frame using colnames vector
colnames(my_data) <- colnames
# Display contents of my_data
my_data
# Show first 
head(my_data)
# Show attribute structure 
str(my_data)
my_data
my_data$Age[my_data$Age == 99] <- NA
# Examine new data in my_data to confirm substitution
my_data
my_data$AgeCat[my_data$Age >= 45] <- "Elder"
my_data$AgeCat[my_data$Age >= 26 & my_data$Age <= 44] <- "Middle Aged"
my_data$AgeCat[my_data$Age <= 25] <- "Young"
my_data$AgeCat[is.na(my_data$Age)] <- "Elder"
my_data
AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder"))
# Show contents of AgeCat
AgeCat
# Replace my_data's AgeCat attribute with newly ordinal foctored data
my_data$AgeCat <- AgeCat
str(my_data)
summary_col <- q1_col + q2_col + q3_col + q4_col + q5_col
sum_col <- my_data$Q1 + my_data$Q2 + my_data$Q3 + my_data$Q4 + my_data$Q5
sum_col
my_data <- data.frame(my_data, summary_col)
my_data
my_data[complete.cases(my_data)]
my_data
t <- complete.cases(my_data)
t
missing_data <- complete.cases(my_data)
missing_data
my_data[complete.cases(my_data),]
?complete.cases
my_data[complete.cases(my_data)]
my_data[complete.cases(my_data), ]
missing_data <- complete.cases(my_data)
missing_data
my_data[complete.cases(my_data), 1]
my_data[complete.cases(my_data), 2]
my_data[complete.cases(my_data), 3]
my_data[complete.cases(my_data), 1:5]
my_data[!complete.cases(my_data),]
sum(is.na(my_data$Age))
meanis.na(my_data$Age))
mean(is.na(my_data$Age))
mean(!complete.cases(my_data))
sum(is.na(my_data$Age))
mean(!complete.cases(my_data))
mean(!complete.cases(my_data),)
aggregate(my_data)
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%d/%m/%Y")
dates
strDates <- c("01/05/1965", "16/08/1975")
dates <- as.Date(strDates, "%d/%m/%Y")
dates
date_field <- as.Date(my_data$Date, "%m,/%d,/%Y")
date_field
date_field <- as.Date(my_data$Date, "%m/%d/%Y")
date_field
my_data$Date
date_field <- as.Date(my_data$Date, "%m-%d-%Y")
date_field
date_field <- as.Date(my_data$Date, "%d-%m-%Y")
date_field
date_field <- as.Date(my_data$Date, "%d/%m/%Y")
date_field
date_field <- as.Date(my_data$Date, "%Y/%m/%d")
date_field
date_field <- as.Date(my_data$Date, "%Y-%m-%d")
date_field
my_data$Date
my_data$Date
date_field <- as.Date(my_data$Date, "%Y-%m-%d")
date_field
date_field <- as.Date(my_data$Date, "%Y-%d-%m")
date_field
new_format <- format(my_data, format = "%b/%m/%Y")
new_format
new_format <- format(my_data$Date, format = "%b/%m/%Y")
new_format
new_format <- as.Date(my_data$Date, my_date_format))
new_format <- as.Date(my_data$Date, my_date_format)
my_date_format = "%b/%m/%Y"
new_format <- as.Date(my_data$Date, my_date_format)
new_format
my_date_format = "%b/%m/%Y"
new_format <- format.Date(my_data$Date, my_date_format)
new_format <- format(my_data$Date, my_date_format)
my_date_format = "%b/%m/%Y"
new_format <- format(my_data$Date, my_date_format)
new_format <- format(my_data$Date, "%b/%m/%Y")
str(my_data$Date)
my_data$Date <- date_field
str(my_data$Date)
new_format <- format(my_data$Date, "%b/%m/%Y")
new_format
my_data
new_format
my_data$Date <- new_format
my_data
str(my_data$Date)
date_field <- as.Date(my_data$Date, "%Y-%d-%m")
date_field
# Create column names for each attribute in the data frame colnames <- c("Date", "Country", "Gender", "Age", "Q1", "Q2", "Q3", "Q4", "Q5") # Enter data into vectors before constructing the data frame date_col <- c("2018-15-10", "2018-01-11", "2018-21-10", "2018-28-10", "2018-01-05") country_col <- c("US", "US", "IRL", "IRL", "IRL") gender_col <- c("M", "F", "F", "M", "F") age_col <- c(32, 45, 25, 39, 99) # 99 is one of the values in the age attribute - will require recoding q1_col <- c(5, 3, 3, 3, 2) q2_col <- c(4, 5, 5, 3, 2) q3_col <- c(5, 2, 5, 4, 1) q4_col <- c(5, 5, 5, NA, 2) # NA is inserted in place of the missing data for this attribute q5_col <- c(5, 5, 2, NA, 1) # Construct a data frame using the data from all vectors above my_data <- data.frame(date_col, country_col, gender_col, age_col, q1_col, q2_col, q3_col, q4_col, q5_col) # Add column names to data frame using colnames vector colnames(my_data) <- colnames # Display contents of my_data my_data # Show first 5 rows from my_data head(my_data) # Show attribute structure of my_data str(my_data) # Recode the incorrect 'age' data to NA my_data$Age[my_data$Age == 99] <- NA # Examine new data in my_data to confirm substitution my_data # Create a new attribute called AgeCat and set valuess # in AgeCat to the following if true: # <= 25 = Young # >= 26 & <= 44 = Middle Aged # >= 45 = Elderly # We will also recode age 'NA' to Elder my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 & my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age <= 25] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "Elder" # Show contents of data frame my_data # Recode AgeCat so that is ordinal and factored with the # order Young, Middle aged, Elder # We'll srore the ordinal factored data in variable 'AgeCat' AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) # Show contents of AgeCat AgeCat # Replace my_data's AgeCat attribute with newly ordinal foctored data my_data$AgeCat <- AgeCat # Show new structure str(my_data) # Create a new column called 'summary_col' that # contains a summary of each row summary_col <- my_data$Q1 + my_data$Q2 + my_data$Q3 + my_data$Q4 + my_data$Q5 summary_col # Add summary_col to the end of the data frame my_data <- data.frame(my_data, summary_col) my_data # Convert string to date fields # Show structure of the data frame str(my_data) # Example of as.Date() function strDates <- c("01/05/1965", "16/08/1975") dates <- as.Date(strDates, "%d/%m/%Y") dates # Convert the date field in my_data to a date # Original data my_data$Date # Convert from string to relevant structure # In this example, convert date string to yyyy-dd-mm # as we have to match what is in the original vector # before we can convert it date_field <- as.Date(my_data$Date, "%Y-%d-%m") # Show output date_field # Replace the date field in the data frame my_data$Date <- date_field
my_data
str(my_data)
str(my_data)
my_data
Sys.Date
Sys.Date()
putput_date <- format(today, format = date_format)
date_format <- "%b %d %Y"
today <- Sys.Date()
putput_date <- format(today, format = date_format)
output_date <- format(today, format = date_format)
output_date
startdate <- as.Date("2004-02-13")
enddate <- as.Date("2011-01-22")
days <- enddate - startdate
days
?difftime
todays_date <- Sys.Date()
my_dob <- as.Date("08-03-1969")
diff_dates <- diffdate(today, my_dob, units = "days")
diffdate(today, my_dob, units = "days")
diff_dates <- diff.Date(today, my_dob, units = "days")
todays_date <- Sys.Date()
my_dob <- as.Date("08-03-1969")
diff_dates <- diff.Date(today, my_dob, units = "days")
?diff.Date
diff_dates <- diff.Date(today, my_dob, units = "weeks")
diff_dates <- difftime(today, my_dob, units = "weeks")
diff_dates
diff_dates <- difftime(today, my_dob, units = "days")
diff_dates
? difftime
new_data <- my_data[order(my_data$Age)]
new_data
my_data
new_data <- my_data[order(my_data$Age),]
new_data
new_data <- my_data[order(Gender, Age)]
attach(my_data)
new_data <- my_data[order(Gender, Age)]
new_data
new_data <- my_data[order(Gender, Age),]
new_data
str(my_data$Age)
str(my_data$Gender)
str(my_data)
new_data <- my_data[order(AgeCat),]
new_data
attach(my_data)
search()
new_gender_col <- as.factor(c("M", "F", "F", "M", "F"))
new_gender_col
new_gender_col <- as.factor(c("M", "F", "F", "M", "F"), order = TRUE, levels = c("M", "F"))
new_gender_col <- as.factor(my_data$Age, order = TRUE, levels = c("M", "F"))
new_gender_col <- factor(my_data$Age, order = TRUE, levels = c("M", "F"))
new_gender_col
my_data$Gender <- new_gender_col
str(my_data)
new_gender_col
new_gender_col <- factor(my_data$Gender, order = TRUE, levels = c("M", "F"))
new_gender_col
my_data$Gender <- new_gender_col
str(my_data)
gender_col <- c("M", "F", "F", "M", "F")
new_gender_col <- factor(my_data$Gender, order = TRUE, levels = c("M", "F"))
new_gender_col
my_data$Gender <- new_gender_col
str(my_data)
my_data
gender_col <- c("M", "F", "F", "M", "F")
my_data
 Create column names for each attribute in the data frame colnames <- c("Date", "Country", "Gender", "Age", "Q1", "Q2", "Q3", "Q4", "Q5") # Enter data into vectors before constructing the data frame date_col <- c("2018-15-10", "2018-01-11", "2018-21-10", "2018-28-10", "2018-01-05") country_col <- c("US", "US", "IRL", "IRL", "IRL") gender_col <- c("M", "F", "F", "M", "F") age_col <- c(32, 45, 25, 39, 99) # 99 is one of the values in the age attribute - will require recoding q1_col <- c(5, 3, 3, 3, 2) q2_col <- c(4, 5, 5, 3, 2) q3_col <- c(5, 2, 5, 4, 1) q4_col <- c(5, 5, 5, NA, 2) # NA is inserted in place of the missing data for this attribute q5_col <- c(5, 5, 2, NA, 1) # Construct a data frame using the data from all vectors above my_data <- data.frame(date_col, country_col, gender_col, age_col, q1_col, q2_col, q3_col, q4_col, q5_col) # Add column names to data frame using colnames vector colnames(my_data) <- colnames # Display contents of my_data my_data # Show first 5 rows from my_data head(my_data) # Show attribute structure of my_data str(my_data) # Recode the incorrect 'age' data to NA my_data$Age[my_data$Age == 99] <- NA # Examine new data in my_data to confirm substitution my_data # Create a new attribute called AgeCat and set valuess # in AgeCat to the following if true: # <= 25 = Young # >= 26 & <= 44 = Middle Aged # >= 45 = Elderly # We will also recode age 'NA' to Elder my_data$AgeCat[my_data$Age >= 45] <- "Elder" my_data$AgeCat[my_data$Age >= 26 & my_data$Age <= 44] <- "Middle Aged" my_data$AgeCat[my_data$Age <= 25] <- "Young" my_data$AgeCat[is.na(my_data$Age)] <- "Elder" # Show contents of data frame my_data # Recode AgeCat so that is ordinal and factored with the # order Young, Middle aged, Elder # We'll srore the ordinal factored data in variable 'AgeCat' AgeCat <- factor(my_data$AgeCat, order = TRUE, levels = c("Young", "Middle Aged", "Elder")) # Show contents of AgeCat AgeCat # Replace my_data's AgeCat attribute with newly ordinal foctored data my_data$AgeCat <- AgeCat # Show new structure str(my_data) # Create a new column called 'summary_col' that # contains a summary of each row summary_col <- my_data$Q1 + my_data$Q2 + my_data$Q3 + my_data$Q4 + my_data$Q5 summary_col # Add summary_col to the end of the data frame my_data <- data.frame(my_data, summary_col) my_data # Convert string to date fields # Show structure of the data frame str(my_data) # Example of as.Date() function strDates <- c("01/05/1965", "16/08/1975") dates <- as.Date(strDates, "%d/%m/%Y") dates # Convert the date field in my_data to a date # Original data my_data$Date # Convert from string to relevant structure # In this example, convert date string to yyyy-dd-mm # as we have to match what is in the original vector # before we can convert it date_field <- as.Date(my_data$Date, "%Y-%d-%m") # Show output date_field # Replace the date field in the data frame my_data$Date <- date_field str(my_data) my_data # Example of changing the output date date_format <- "%b %d %Y" today <- Sys.Date() output_date <- format(today, format = date_format) output_date # Display difference between 13th Feb 2004 and 22nd Jan 2018 startdate <- as.Date("2004-02-13") enddate <- as.Date("2018-01-22") days <- enddate - startdate days ? difftime # Calaulate you old I am in days todays_date <- Sys.Date() my_dob <- as.Date("08-03-1977") diff_dates <- difftime(today, my_dob, units = "days") diff_dates #Sorting data by age my_data new_data <- my_data[order(my_data$Age),] new_data # We can use attach command to bypas need for '$' sign  # to identify variables in the data frame attach(my_data) search() str(my_data$Age) str(my_data$Gender) new_data <- my_data[order(Gender, Age),] # Sort by AgeCat. This is a factored variable new_data <- my_data[order(AgeCat),] new_data
my_data
new_gender_col <- factor(my_data$Gender, order = TRUE, levels = c("M", "F"))
new_gender_col
my_data$Gender <- new_gender_col
str(my_data)
my_data
new_data <- my_data[order(Gender),]
new_data
new_data <- my_data[order(Gender = 'M'),]
new_data
new_data <- my_data[order(-Gender),]
new_data <- my_data[-order(Gender),]
new_data
new_data <- my_data[order(-Gender),]
new_data <- my_data[order(AgeCat),]
new_data
new_data <- my_data[order(-AgeCat),]
